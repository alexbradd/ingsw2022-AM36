package it.polimi.ingsw.server.model;

import java.util.List;
import java.util.Objects;
import java.util.Objects.*;

/**
 * The main class of the game model, it represents a single game instance, takes track of all the game parameters,
 * game entities (such as the Sack instance or the IslandList instance) and has a reference to the current {@link Phase}
 * of the game. It is factory generated by the {@link GameFactory} class, with the correct parameters for a 2-player or
 * 3-player game, with simplified or expert rules.
 *
 * @author Leonardo Bianconi
 * @see Phase
 * @see GameFactory
 */

public class Game extends Thread {
    /**
     * The number of players of the game.
     */
    private final int nPlayers;

    /**
     * The initial number of towers of each player.
     */
    private final int nTowers;

    /**
     * The number of movable students from a player's Entrance in each action phase.
     */
    private final int nStudentsMovable;

    /**
     * The initial number of students in every player's Entrance.
     */
    private final int nStudentsEntrance;

    /**
     * The number of students of every color in the sack.
     */
    private static final int nStudentsOfColor = 26;

    /**
     * The number of professors.
     */
    private static final int nProfessors = 5;

    /**
     * The number of characters on the play area.
     */
    private static final int nOfCharacters = 3;

    /**
     * Whether the game mode is "expert rules" (see game rules).
     */
    private final boolean expertMode;

    /**
     * The {@link Sack} instance.
     */
    private final Sack sack;

    /**
     * The List<{@link Cloud}> instance. It represents the clouds on the play area.
     */
    private final List<Cloud> clouds;
    /**
     * The {@link IslandList} instance. It represents the islands on the play area.
     */
    private final IslandList islands;

    /**
     * The {@link MotherNature} instance.
     */
    private final MotherNature motherNature;

    /**
     * An array containing all the {@link Professor} instances.
     */
    private final Professor[] professors;

    /**
     * An array containing all the {@link Character} instances (i.e. chosen characters for the game, only in
     * expert mode, see game rules).
     */
    private final Character[] characters;

    /**
     * A {@link PlayerList} instance representing the connected players.
     */
    private final PlayerList players;

    /**
     * A {@link Phase} subclass instance, representing the current state of the game.
     */
    private Phase currentPhase;

    /**
     * Whether the game is ended or not.
     */
    private boolean ended;

    /**
     * The default constructor. It initializes the fields by the values passed via parameters, and sets the
     * initial phase to a lobby phase.
     *
     * @param nPlayers          the number of players
     * @param nTowers           the number of {@link Tower}s owned by each player
     * @param nStudentsMovable  the number of students that a player can move during the {@link StudentMovePhase}
     * @param nStudentsEntrance the number of students in the {@link Entrance} of each player at the beginning of
     *                          the game
     * @param expertMode        whether the game rules are "Expert Rules" or "Simplified Rules" (see game rules)
     * @param sack              the reference to the {@link Sack} instance
     * @param clouds            the reference to the List<{@link Cloud}> instance
     * @param islands           the reference to the {@link IslandList} instance
     * @param motherNature      the reference to the {@link MotherNature} instance
     * @param players           the reference to the {@link PlayerList} instance
     * @param ended             whether the game is ended or not (i.e. there is a winner)
     * @param professors        an array containing all the {@link Professor}s of the game
     * @param characters        an array containing all the chose {@link Character}s for the game
     * @throws IllegalArgumentException  if any of the object parameters passed is null
     * @throws IndexOutOfBoundsException if any of the integer parameters is out of bounds
     */
    Game(int nPlayers, int nTowers, int nStudentsMovable, int nStudentsEntrance, boolean expertMode, Sack sack, List<Cloud> clouds, IslandList islands, MotherNature motherNature, Professor[] professors, Character[] characters, PlayerList players, boolean ended) throws IllegalArgumentException {

        if (nPlayers < 2 || nPlayers > 3)
            throw new IndexOutOfBoundsException("nPlayers must be in range [2, 3]");
        if (nTowers < 1 || nTowers > 8)
            throw new IndexOutOfBoundsException("nTowers must be in range [1, 8]");
        if (nStudentsMovable < 3 || nStudentsMovable > 4)
            throw new IndexOutOfBoundsException("nTowers must be in range [1, 8]");
        if (nStudentsEntrance < 7 || nStudentsEntrance > 9)
            throw new IndexOutOfBoundsException("nTowers must be in range [1, 8]");

        if (sack == null)
            throw new IllegalArgumentException("sack must not be null");
        if (clouds == null)
            throw new IllegalArgumentException("clouds must not be null");
        if (islands == null)
            throw new IllegalArgumentException("islands must not be null");
        if (motherNature == null)
            throw new IllegalArgumentException("motherNature must not be null");
        if (professors == null)
            throw new IllegalArgumentException("professors must not be null");
        if (characters == null)
            throw new IllegalArgumentException("characters must not be null");
        if (players == null)
            throw new IllegalArgumentException("players must not be null");

        this.nPlayers = nPlayers;
        this.nTowers = nTowers;
        this.nStudentsMovable = nStudentsMovable;
        this.nStudentsEntrance = nStudentsEntrance;
        this.expertMode = expertMode;
        this.sack = sack;
        this.clouds = clouds;
        this.islands = islands;
        this.motherNature = motherNature;
        this.professors = professors;
        this.characters = characters;
        this.players = players;
        this.ended = ended;
        this.currentPhase = new LobbyPhase(this);
    }

    /**
     * Returns the number of maximum players of the game.
     */
    public int getnPlayers() {
        return nPlayers;
    }

    /**
     * Returns whether the game has expert rules or not (see game rules).
     */
    public boolean isExpertMode() {
        return expertMode;
    }

    /**
     * Returns whether the game has a winner or not.
     */
    public boolean isEnded() {
        return ended;
    }

    /**
     * The method that starts all operations of the game. It needs to be called at the start of the game and it'll
     * keep running until a winner is found, and soon after the Game instance will be deleted.
     * It implements the Runnable interface method, such that a thread can easily run a game.
     */
    public void run() {
        while (!ended)
            currentPhase = currentPhase.doPhase();
    }

    /**
     * This method is used to execute the code inside the {@link UserEvent}, it is part of the Command pattern.
     *
     * @param c the {@link UserEvent} to be executed
     * @throws IllegalArgumentException if c is a null pointer
     */
    public void consumeUserEvent(UserEvent c) throws IllegalArgumentException {
        if (c == null) throw new IllegalArgumentException("user event should not be null.");

        try {
            c.consume(currentPhase);
        } catch (Exception e) {     // TODO catch statements
            e.printStackTrace();
        }
    }

    /**
     * Returns a concise string representation of the Game instance, without exposing the game model entities.
     *
     * @return a string representation of the Game instance
     */
    @Override
    public String toString() {
        return "Game{" +
                "nPlayers=" + nPlayers +
                ", expertMode=" + expertMode +
                ", players=" + players +
                ", currentPhase=" + currentPhase +
                ", ended=" + ended +
                '}';
    }
}