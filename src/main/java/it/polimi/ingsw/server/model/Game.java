package it.polimi.ingsw.server.model;

/**
 * The main class of the game model, it represents a single game instance, takes track of all the game parameters,
 * game entities (such as the Sack instance or the IslandList instance) and has a reference to the current {@link Phase}
 * of the game. It is factory generated by the {@link GameFactory} class, with the correct parameters for a 2-player or
 * 3-player game, with simplified or expert rules.
 *
 * @author Leonardo Bianconi
 * @see Phase
 * @see GameFactory
 */

public class Game {
    private final int nPlayers;
    private final int nTowers;
    private final int nStudentsMovable;
    private final int nStudentsEntrance;
    private static final int nStudentsOfColor = 26;
    private static final int nProfessors = 5;
    private static final int nOfCharacters = 3;
    private final boolean expertMode;

    private final Sack sack;
    private final List<Cloud> clouds;
    private final IslandList islands;
    private final MotherNature motherNature;
    private final Professor[nProfessors]professors;
    private final Character[nOfCharacters]characters;
    private final PlayerList players;

    private Phase currentPhase;
    private boolean ended;

    /**
     * The default constructor.
     *
     * @param nPlayers          the number of players
     * @param nTowers           the number of {@link Tower}s owned by each player
     * @param nStudentsMovable  the number of students that a player can move during the {@link StudentMovePhase}
     * @param nStudentsEntrance the number of students in the {@link Entrance} of each player at the beginning of
     *                          the game
     * @param expertMode        whether the game rules are "Expert Rules" or "Simplified Rules" (see game rules)
     * @param sack              the reference to the {@link Sack} instance
     * @param clouds            the reference to the List<{@link Cloud}> instance
     * @param islands           the reference to the {@link IslandList} instance
     * @param motherNature      the reference to the {@link MotherNature} instance
     * @param players           the reference to the {@link PlayerList} instance
     * @param currentPhase      the initial {@link Phase} of the game
     * @param ended             whether the game is ended or not (i.e. there is a winner)
     * @throws NullPointerException if any of the object parameters passed is null
     */
    Game(int nPlayers, int nTowers, int nStudentsMovable, int nStudentsEntrance, boolean expertMode, Sack sack, List<Cloud> clouds, IslandList islands, MotherNature motherNature, PlayerList players, Phase currentPhase, boolean ended) {
        this.nPlayers = nPlayers;
        this.nTowers = nTowers;
        this.nStudentsMovable = nStudentsMovable;
        this.nStudentsEntrance = nStudentsEntrance;
        this.expertMode = expertMode;
        this.sack = sack;
        this.clouds = clouds;
        this.islands = islands;
        this.motherNature = motherNature;
        this.players = players;
        this.currentPhase = currentPhase;
        this.ended = ended;
    }

    /**
     * Returns the number of maximum players of the game.
     */
    public int getnPlayers() {
        return nPlayers;
    }

    /**
     * Returns whether the game has expert rules or not (see game rules).
     */
    public boolean isExpertMode() {
        return expertMode;
    }

    /**
     * Returns whether the game has a winner or not.
     */
    public boolean isEnded() {
        return ended;
    }

    /**
     * The method that starts all operations of the game. It needs to be called at the start of the game and it'll
     * keep running until a winner is found, and soon after the Game instance will be deleted.
     * It implements the Runnable interface method, such that a thread can easily run a game.
     */
    public void run() {
        while (!ended)
            currentPhase = currentPhase.doPhase();
    }

    /**
     * This method is used to execute the code inside the {@link UserEvent}, it is part of the Command pattern.
     *
     * @param c the {@link UserEvent} to be executed
     * @throws NullPointerException if c is a null pointer
     */
    public void consumeUserEvent(UserEvent c) {
        if (c.equals(null)) throw new NullPointerException("user event should not be null.");
        c.consume(currentPhase);
    }

    /**
     * It checks all win conditions, returning whether there is a winner for the game or not.
     *
     * @return whether one (or more) player has won the game
     */
    public boolean checkWin() {
        // TODO
    }

    /**
     * Returns a concise string representation of the Game instance, without exposing the game model entities.
     *
     * @return a string representation of the Game instance
     */
    @Override
    public String toString() {
        return "Game{" +
                "nPlayers=" + nPlayers +
                ", nTowers=" + nTowers +
                ", nStudentsMovable=" + nStudentsMovable +
                ", nStudentsEntrance=" + nStudentsEntrance +
                ", expertMode=" + expertMode +
                ", currentPhase=" + currentPhase +
                ", ended=" + ended +
                '}';
    }
}